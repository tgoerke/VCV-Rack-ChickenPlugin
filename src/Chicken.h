
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef CHICKEN_H
#define CHICKEN_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "Chicken.tables.h"

typedef struct Chicken__ctx_type_0 {
   uint8_t pre;
} Chicken__ctx_type_0;

typedef Chicken__ctx_type_0 Chicken_edge_type;

static_inline void Chicken__ctx_type_0_init(Chicken__ctx_type_0 &_output_){
   Chicken__ctx_type_0 _ctx;
   _ctx.pre = false;
   _output_ = _ctx;
   return ;
}

static_inline void Chicken_edge_init(Chicken__ctx_type_0 &_output_){
   Chicken__ctx_type_0_init(_output_);
   return ;
}

static_inline uint8_t Chicken_edge(Chicken__ctx_type_0 &_ctx, uint8_t clk){
   uint8_t ret;
   ret = ((clk == true) && (_ctx.pre == false));
   _ctx.pre = clk;
   return ret;
}

typedef struct Chicken__ctx_type_1 {
   float out;
   Chicken__ctx_type_0 _inst2;
} Chicken__ctx_type_1;

typedef Chicken__ctx_type_1 Chicken_process_type;

void Chicken__ctx_type_1_init(Chicken__ctx_type_1 &_output_);

static_inline void Chicken_process_init(Chicken__ctx_type_1 &_output_){
   Chicken__ctx_type_1_init(_output_);
   return ;
}

static_inline float Chicken_process(Chicken__ctx_type_1 &_ctx, float clock, float mod1, float mod2){
   if(Chicken_edge(_ctx._inst2,(clock > 0.2f))){
      _ctx.out = float_random();
   }
   return _ctx.out;
}



#endif // CHICKEN_H
