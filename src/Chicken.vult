fun edge(clk) {
  mem pre;
  val ret = clk == true && pre == false;
  pre = clk;
  return ret;
}

fun slew(x, rate) {
  mem state;
  val diff = x - state;
  val y = if diff > rate then rate else if diff < -rate then -rate else diff;
  state = state + y;
  return state;
}

fun channel(trigger, rate, range, offset) {
  mem sample;
  if(trigger)
    sample =  2.0 * random() - 1.0;
  return range * slew(sample, 0.001 * rate) + offset;
}

fun process(clock:real, mod1:real, mod2:real){
  mem knob1:real;  // defines slew rate
  mem knob2:real;  // defines range of amplitude
  mem knob3:real;  // defines offset
  mem knob4:real;

  val trigger = edge(clock >0.2);

  val out1 = channel(trigger, knob1, knob2, knob3);
  val out2 = channel(trigger, knob1, knob2, knob3);

  return out1, out2;
}

and setKnob1(value) {
  knob1 = value;
}
and setKnob2(value) {
  knob2 = value;
}
and setKnob3(value) {
  knob3 = value;
}
and setKnob4(value) {
  knob4 = value;
}