
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "Chicken.h"

float Chicken_slew(Chicken__ctx_type_1 &_ctx, float x, float rate){
   float diff;
   diff = (x + (- _ctx.state));
   float y;
   if(diff > rate){
      y = rate;
   }
   else
   {
      if(diff < (- rate)){
         y = (- rate);
      }
      else
      {
         y = diff;
      }
   }
   _ctx.state = (_ctx.state + y);
   return _ctx.state;
}

void Chicken__ctx_type_2_init(Chicken__ctx_type_2 &_output_){
   Chicken__ctx_type_2 _ctx;
   _ctx.sample = 0.0f;
   Chicken__ctx_type_1_init(_ctx._inst4);
   _output_ = _ctx;
   return ;
}

void Chicken__ctx_type_3_init(Chicken__ctx_type_3 &_output_){
   Chicken__ctx_type_3 _ctx;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   _ctx.knob4 = 0.0f;
   _ctx.knob3 = 0.0f;
   _ctx.knob2 = 0.0f;
   _ctx.knob1 = 0.0f;
   Chicken__ctx_type_2_init(_ctx._inst8);
   Chicken__ctx_type_2_init(_ctx._inst7);
   Chicken__ctx_type_0_init(_ctx._inst6);
   _output_ = _ctx;
   return ;
}

void Chicken_process(Chicken__ctx_type_3 &_ctx, float clock, float mod1, float mod2){
   uint8_t trigger;
   trigger = Chicken_edge(_ctx._inst6,(clock > 0.2f));
   float out1;
   out1 = Chicken_channel(_ctx._inst7,trigger,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   float out2;
   out2 = Chicken_channel(_ctx._inst8,trigger,_ctx.knob1,_ctx.knob2,_ctx.knob3);
   _ctx.process_ret_0 = out1;
   _ctx.process_ret_1 = out2;
   return ;
}


